<?php

/**
 * @file
 * Main module file for more permissions.
 */

/**
 * Implements hook_menu().
 */
function more_permissions_menu() {

  $items['admin/people/more-permissions'] = array(
    'title' => 'More permissions',
    'description' => 'Configure additional permissions for users.',
    'access callback' => 'more_permissions_access',
    'access arguments' => array('administer more permissions'),
    'page arguments' => array('more_permissions_admin_permissions'),
    'page callback' => 'drupal_get_form',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'more_permissions.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function more_permissions_theme() {
  return array(
    'more_permissions_admin_permissions' => array(
      'render element' => 'form',
      'file' => 'more_permissions.admin.inc',
    ),
    'more_permission_description' => array(
      'variables' => array('permission_item' => NULL, 'hide' => NULL),
      'file' => 'more_permissions.admin.inc',
    ),
  );
}

/**
 * Access callback: administer more permissions.
 *
 * @param string $string
 *   The permission, such as "administer nodes", being checked for.
 * @param array $account
 *   (optional) The account to check, if not given use currently logged in user.
 *
 * @return bool
 *   Boolean TRUE if the user has the requested permission.
 *
 * @see more_permissions_access()
 */
function more_permissions_access($string, array $account = NULL) {

  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = user_role_permissions($account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;
  }

  return isset($perm[$account->uid][$string]);
}

/**
 * Implements hook_permission().
 */
function more_permissions_permission() {

}

/**
 * Get extra permissions.
 */
function more_permissions_get_extra_permissions() {

  // Initialize extra permisions.
  $extra_permissions = array();

  // Add extra permissions for the menus.
  $menus = menu_get_menus();
  if (!empty($menus)) {
    foreach ($menus as $menu => $name) {
      $menu_permission = 'manage ' . $name;
      $extra_permissions[$menu_permission] = array(
        'title' => t('Manage !menu_name', array('!menu_name' => $name)),
      );
    }
  }

  // Add extra permissions for the taxonomy.
  $vocabularies = taxonomy_get_vocabularies();
  if (!empty($vocabularies)) {
    foreach ($vocabularies as $key => $vocabulary) {
      $taxonomy_permission = 'manage ' . $vocabulary->machine_name;
      $extra_permissions[$taxonomy_permission] = array(
        'title' => t('Manage !vocabylary_name', array('!vocabylary_name' => $vocabulary->machine_name)),
      );
    }
  }

  return $extra_permissions;
}

/**
 * Implements hook_extra_permission().
 */
function more_permissions_extra_permission() {

  $extra_permissions = array(
    'administer more permissions' => array(
      'title' => t('Administer more permissions'),
      'restrict access' => TRUE,
    ),
  );

  // Add the extra permissions.
  $extra_permissions += more_permissions_get_extra_permissions();

  return $extra_permissions;
}

/**
 * Invokes a user hook in every module.
 *
 * We cannot use module_invoke() for this, because the arguments need to
 * be passed by reference.
 *
 * @param string $type
 *   A text string that controls which user hook to invoke.  Valid choices are:
 *   - cancel: Invokes hook_user_cancel().
 *   - insert: Invokes hook_user_insert().
 *   - login: Invokes hook_user_login().
 *   - presave: Invokes hook_user_presave().
 *   - update: Invokes hook_user_update().
 * @param array $edit
 *   An associative array variable containing form values to be passed
 *   as the first parameter of the hook function.
 * @param array $account
 *   The user account object to be passed as the second parameter of the hook
 *   function.
 * @param string $category
 *   The category of user information being acted upon.
 */
function more_permissions_module_invoke($type, array &$edit, array $account, string $category = NULL) {
  foreach (module_implements('more_permissions_' . $type) as $module) {
    $function = $module . '_extra_permission_' . $type;
    $function($edit, $account, $category);
  }
}

/**
 * Determine the permissions for one or more roles.
 *
 * @param array $roles
 *   An array whose keys are the role IDs of interest, such as $user->roles.
 *
 * @return mixed
 *   If $roles is a non-empty array, an array indexed by role ID is returned.
 *   Each value is an array whose keys are the permission strings for the given
 *   role ID. If $roles is empty nothing is returned.
 */
function more_permissions_role_permissions(array $roles = array()) {

  $cache = &drupal_static(__FUNCTION__, array());

  $role_permissions = $fetch = array();

  if ($roles) {
    foreach ($roles as $rid => $name) {
      if (isset($cache[$rid])) {
        $role_permissions[$rid] = $cache[$rid];
      }
      else {
        // Add this rid to the list of those needing to be fetched.
        $fetch[] = $rid;
        // Prepare in case no permissions are returned.
        $cache[$rid] = array();
      }
    }

    if ($fetch) {
      // Get from the database permissions that were not in the static variable.
      // Only role IDs with at least one permission assigned will return rows.
      $result = db_query("SELECT rid, permission FROM {more_permissions} WHERE rid IN (:fetch)", array(':fetch' => $fetch));

      foreach ($result as $row) {
        $cache[$row->rid][$row->permission] = TRUE;
      }
      foreach ($fetch as $rid) {
        // For every rid, we know we at least assigned an empty array.
        $role_permissions[$rid] = $cache[$rid];
      }
    }
  }

  return $role_permissions;
}

/**
 * Change permissions for a user role.
 *
 * This function may be used to grant and revoke multiple permissions at once.
 * For example, when a form exposes checkboxes to configure permissions for a
 * role, the form submit handler may directly pass the submitted values for the
 * checkboxes form element to this function.
 *
 * @param int $rid
 *   The ID of a user role to alter.
 * @param array $permissions
 *   An associative array, where the key holds the permission name and the value
 *   determines whether to grant or revoke that permission. Any value that
 *   evaluates to TRUE will cause the permission to be granted. Any value that
 *   evaluates to FALSE will cause the permission to be revoked.
 *
 * @code
 *   array(
 *     'administer nodes' => 0,                // Revoke 'administer nodes'
 *     'administer blocks' => FALSE,           // Revoke 'administer blocks'
 *     'access user profiles' => 1,            // Grant 'access user profiles'
 *     'access content' => TRUE,               // Grant 'access content'
 *     'access comments' => 'access comments', // Grant 'access comments'
 *   )
 * @endcode
 *
 *   Existing permissions are not changed, unless specified in $permissions.
 *
 * @see user_role_grant_permissions()
 * @see user_role_revoke_permissions()
 */
function more_permissions_role_change_permissions($rid, array $permissions = array()) {
  // Grant new permissions for the role.
  $grant = array_filter($permissions);
  if (!empty($grant)) {
    more_permissions_role_grant_permissions($rid, array_keys($grant));
  }
  // Revoke permissions for the role.
  $revoke = array_diff_assoc($permissions, $grant);
  if (!empty($revoke)) {
    more_permissions_role_revoke_permissions($rid, array_keys($revoke));
  }
}

/**
 * Grant permissions to a user role.
 *
 * @param int $rid
 *   The ID of a user role to alter.
 * @param array $permissions
 *   A list of permission names to grant.
 *
 * @see user_role_change_permissions()
 * @see user_role_revoke_permissions()
 */
function more_permissions_role_grant_permissions($rid, array $permissions = array()) {
  $modules = more_permissions_permission_get_modules();
  // Grant new permissions for the role.
  foreach ($permissions as $name) {
    db_merge('more_permissions')
      ->key(array(
        'rid' => $rid,
        'permission' => $name,
      ))
      ->fields(array(
        'module' => $modules[$name],
      ))
      ->execute();
  }

  // Clear the user access cache.
  drupal_static_reset('more_permissions_access');
  drupal_static_reset('more_permissions_role_permissions');
}

/**
 * Revoke permissions from a user role.
 *
 * @param int $rid
 *   The ID of a user role to alter.
 * @param array $permissions
 *   A list of permission names to revoke.
 *
 * @see more_permissions_role_change_permissions()
 * @see more_permissions_role_grant_permissions()
 */
function more_permissions_role_revoke_permissions($rid, array $permissions = array()) {
  // Revoke permissions for the role.
  db_delete('more_permissions')
    ->condition('rid', $rid)
    ->condition('permission', $permissions, 'IN')
    ->execute();

  // Clear the user access cache.
  drupal_static_reset('more_permissions_access');
  drupal_static_reset('more_permissions_role_permissions');
}

/**
 * Determine the modules that permissions belong to.
 *
 * @return array
 *   An associative array in the format $permission => $module.
 */
function more_permissions_permission_get_modules() {
  $permissions = array();
  foreach (module_implements('extra_permission') as $module) {
    $perms = module_invoke($module, 'extra_permission');
    foreach ($perms as $key => $value) {
      $permissions[$key] = $module;
    }
  }
  return $permissions;
}
